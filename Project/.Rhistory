mean(predict(modelFit,newdata=testing)==testing$diagnosis)
preProc=preProcess(X,method="pca",thresh=80)
preProc=preProcess(X[,-1],method="pca",thresh=80)
a=matrix(1:4,nrow=2)
a
a[,1]
a[,-1]
names(X)
tail(X)
preProc=preProcess(X[,-13],method="pca",thresh=80)
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testing))
preProc
class(preProc)
dim(preProc)
print(preProc)
summary(preProc)
predict(preProc,training$diagnosis)
predict(preProc,X[,-13])
trainPC = predict(preProc,X[,-13])
modelFit = train(diagnosis~.,data=trainPC,method="glm")
modelFit = train(X$diagnosis~.,data=trainPC,method="glm")
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testing))
dim(testing)
testPC=predict(PreProc,newdata=testing[,58:69])
testPC=predict(preProc,newdata=testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testPC))
help(createDataPartition)
dim(segmentationOriginal)
dim(SegmentationOriginal)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
dim(SegmentationOriginal)
dim(segmentationOriginal)
names(segmentationOriginal)
inTrain = createDataPartition(y=segmentationOriginal$Case,p=0.5,list=F)
training = segmentationOriginal[inTrain,]
testing = segmentationOriginal[-inTrain,]
set.seed(125)
dim(training)
modFit = train(Case,data=training,method="rpart")
names(training)
names(training)=="Case"
which(names(training)=="Case")
which(names(training)=="CART")
which(names(training)=="Cart")
training$Case[1:10]
training$Case
training = segmentationOriginal[Case=='Train',]
training = segmentationOriginal[segmentationOriginal$Case=='Train',]
testing = segmentationOriginal[segmentationOriginal$Case=='Test',]
set.seed(125)
names(training)
which(training=="PS")
a
which(a==2)
training(2728)
training[2728]
a[2]
class(training)
attributes(training)
training$Cell[1:10]
names(training)
training$Case[1:5]
training$Class[1:5]
modFit = train(Class~.,data=training,method="rpart")
modFit
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
help(fancyRpartPlot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
summary(cars)
library(swirl)
swirl()
5+7
x=5+7
x<-5+7
x
y=x-3
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-z-1
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
1:20
pi:100
pi:10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vec<-c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char <- c("My", "name", "is")
my_char
paste(my_char,collapse = " ")
c(my_char, "Jp")
my_name<-c(my_char, "Jp")
my_nale
my_name
paste(my_name,collapse=" ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z=rep(NA,1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x(c(3,5,7))
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
class(vect)
names(vec)
names(vect)
type(vect)
vect2 <- c(11,2,NA)
names(vect2)<- c("foo","bar","norf")
identical(vect,vect2)
vect("bar")
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:10
my_vector <- 1:20
my_vectir
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix<-matrix(1:20,nrow=4,ncol=5)
my_matrix<-matrix(data=1:20,nrow=4,ncol=5)
my_matrix2<-matrix(data=1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(data.frame)
class(my_data)
cnames <- c("patient", "age",
| "weight", "bp", "rating", "test")
cnames <- c("patient", "age","weight", "bp", "rating", "test")
colnames(my_data)<-cnames
my_data
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
seacrh()
search()
weekddays()
weekdays()
weekdays
weekdays(1)
setwd("D:/Mes documents/Coursera/EDA")
x=read.table(file="household_power_consumption.txt",skip=66636,nrows=2881,sep=";")
names(x)=c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
hist(x$Global_active_power,col="red",main="Global Active Power",xlab="Global Active Power (kilowatts)")
plot(x$Date,x$Global_active_power,main="",xlab="")
plot(x=x$Date,y=x$Global_active_power,main="",xlab="")
x=rnorm(1000)
y=rnorm(1000)
plot(x,y)
x=read.table(file="household_power_consumption.txt",skip=66636,nrows=2881,sep=";")
names(x)=c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
plot(x$Global_active_power,main="",xlab="")
plot(x$Global_active_power,main="",xlab="",type="l")
.plot
?plot
?axis
axis(side=1,at=x,labels=x)
axis(side=1,at=x$Date,labels=x$Date)
head(X)
head(x)
x=read.table(file="household_power_consumption.txt",skip=66636,nrows=2881,sep=";")
head(x)
tail(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2881,sep=";")
head(x)
tail(x)
x=read.table(file="household_power_consumption.txt",skip=66636,nrows=2881,sep=";")
head(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2882,sep=";")
tail(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2883,sep=";")
tail(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2884,sep=";")
tail(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2890,sep=";")
dim(x)
tail(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2880,sep=";")
tail(x)
head(x)
x=read.table(file="household_power_consumption.txt",skip=66636,nrows=2880,sep=";")
head(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2885,sep=";")
tail(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2880,sep=";")
tail(x)
axis(side=1,labels=c("Thu","Fri","Sat"))
dim(x)[2]
axis(side=1,at=c(1,floor(dim(x)[1]),dim(x)[1])labels=c("Thu","Fri","Sat"))
axis(side=1,at=c(1,floor(dim(x)[1]),dim(x)[1]),labels=c("Thu","Fri","Sat"))
axis(side=1,at=c(1,floor(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
?par
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",yaxt="n")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",yaxs="n")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",axes=F)
?plot
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",axes=F,xlim=c(1,dim(x)[1]))
head(x)
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",axes=F,
xlim=c(1,dim(x)[1]),
ylim=c(min(x$Global_active_power),max(x$Global_active_power)))
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",axes=F,
xlim=c(1,dim(x)[1]),
ylim=c(min(x$Global_active_power,na.rm=T),max(x$Global_active_power,na.rm=T)))
min(x$Global_active_power, na.rm = T)
head(x$)
head(x)
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2880,sep=";")
names(x)=c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",axes=F,
xlim=c(1,dim(x)[1]),
ylim=c(min(x$Global_active_power,na.rm=T),max(x$Global_active_power,na.rm=T)))
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",axes=F)
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
axis(side=1,at=c(1,floor(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2880,sep=";")
names(x)=c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
png("plot2.png")
dev.off()
library(ggplot2)
png("test.png")
dev.off()
png("plot2.png")
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2880,sep=";")
names(x)=c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
png("plot2.png")
dev.off()
png("test.png")
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2880,sep=";")
names(x)=c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
dev.off()
names(x)
plot(x$Sub_metering_1,main="",xlab="",ylab="Energy sub metering",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
styles()
colors()
legend("topright",lty=1)
legend("topright",names=names(x)[7:9],lty=1)
rep(1,3)
legend("topright",names=names(x)[7:9],lty=rep(1,3))
legend("topright",names=names(x)[7],lty=1)
legend("topright",names='test',lty=1)
?legend
legend("topright",'test',lty=1)
legend("topright",names(x)[7:9],lty=1)
legend("topright",names(x)[7:9],lty=1,col=("black","red","blue"))
legend("topright",names(x)[7:9],lty=1,c("black","red","blue"))
legend("topright",names(x)[7:9],lty=1,col=c("black","red","blue"))
lines(x$Sub_metering_2,col="red")
lines(x$Sub_metering_3,col="blue")
setwd("D:/Mes documents/Coursera/EDA")
x=read.table(file="household_power_consumption.txt",skip=66637,nrows=2880,sep=";")
names(x)=c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
png("plot3.png")
plot(x$Sub_metering_1,main="",xlab="",ylab="Energy sub metering",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
lines(x$Sub_metering_2,col="red")
lines(x$Sub_metering_3,col="blue")
legend("topright",names(x)[7:9],lty=1,col=c("black","red","blue"))
dev.off()
mfrow(c(2,2))
?mfrow
par(mfrow=c(2,2))
plot(x$Sub_metering_1,main="",xlab="",ylab="Energy sub metering",type="l",xaxt="n")
par(clear)
help(mfrow)
help(par)
plot.new()
plot(x$Sub_metering_1,main="",xlab="",ylab="Energy sub metering",type="l",xaxt="n")
fram()
frame()
dev.list()
dev.off()
dev.list()
par(mfrow=1)
par(mfrow=c(1,1))
plot(x$Voltage)
plot(x$Voltage,type="l")
plot(x$Voltage,type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
plot(x$Voltage,type="l",xaxt="n",xlab="datetime")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
plot(x$Global_reactive_power,type="l",xaxt="n",xlab="datetime",ylab="Voltage")
png("plot4.png")
par(mfrow(c(2,2)))
#Plot 1
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
#Plot 2
plot(x$Sub_metering_1,main="",xlab="",ylab="Energy sub metering",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
lines(x$Sub_metering_2,col="red")
lines(x$Sub_metering_3,col="blue")
legend("topright",names(x)[7:9],lty=1,col=c("black","red","blue"))
#Plot 3
plot(x$Voltage,type="l",xaxt="n",xlab="datetime",ylab="Voltage")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
#Plot 4
plot(x$Global_reactive_power,type="l",xaxt="n",xlab="datetime",ylab="Global_reactive_power")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
dev.off()
png("plot4.png")
par(mfrow=c(2,2))
#Plot 1
plot(x$Global_active_power,main="",xlab="",ylab="Global Active Power (kilowatts)",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
#Plot 2
plot(x$Sub_metering_1,main="",xlab="",ylab="Energy sub metering",type="l",xaxt="n")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
lines(x$Sub_metering_2,col="red")
lines(x$Sub_metering_3,col="blue")
legend("topright",names(x)[7:9],lty=1,col=c("black","red","blue"))
#Plot 3
plot(x$Voltage,type="l",xaxt="n",xlab="datetime",ylab="Voltage")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
#Plot 4
plot(x$Global_reactive_power,type="l",xaxt="n",xlab="datetime",ylab="Global_reactive_power")
axis(side=1,at=c(1,round(dim(x)[1]/2),dim(x)[1]),labels=c("Thu","Fri","Sat"))
dev.off()
dev.list()
dev.off()
library(caret)
help(trainControl)
setwd("D:/Mes documents/Coursera/Practical Machine Learning/Project")
#setwd("C:/Documents and Settings/jean-pierre.sylvan/Mes documents/Practical_ML/Project")
pml_training=read.csv(file="pml-training.csv",header=T,sep=,)
pml_training=pml_training[,-1]
pml_testing=read.csv(file="pml-testing.csv",header=T,sep=,)
pml_testing=pml_testing[,-1]
inTrain = createDataPartition(pml_training$classe, p = 3/4)[[1]]
training = pml_training[inTrain,]
testing = pml_training[-inTrain,]
#We keep only the feature which are not factors, anyway the factor feature are all empty
#And only the features where mean(is.na)<90%
num_NA=vector(mode="numeric",length=dim(training)[2])
for (i in 1:length(num_NA)) {
num_NA[i] = mean(is.na(training[,i]))
}
Type=character(dim(training)[2])
for (i in 1:length(Type)) {
Type[i] = class(training[,i])
}
Num = (Type == "numeric")|(Type == "integer")
training_classe=training$classe
testing_classe=testing$classe
training=training[,(num_NA<0.9)&Num] #training doesn't contain classe so we mustn't forget it later
testing=testing[,(num_NA<0.9)&Num] #Same for testing
# PCA and model
pca=preProcess(x=training,method="pca",thresh=0.9)
print(pca)
trainPC = predict(pca,table)
pca=preProcess(x=table,method="pca",thresh=0.9)
table = pml_training[,Num & (num_NA<0.9)]
pca=preProcess(x=table,method="pca",thresh=0.9)
trainPC = predict(pca,table)
modFit = train(pml_training$classe~.,data=trainPC,method="rf",trControl="cv")
library(randomForest)
library(caret)
library(foreach)
library(doParallel)
modFit = train(pml_training$classe~.,data=trainPC,method="rf",trControl="cv")
cv = trainControl(method="cv")
modFit = train(pml_training$classe~.,data=trainPC,method="rf",trControl=cv)
cl<-makeCluster(detectCores())
registerDoParallel(4)
cl
modFit = train(pml_training$classe~.,data=trainPC,method="rf",trControl=cv)
View(trainPC)
modFit
summary(modFit)
modFit$oob
modFit$oob.times
plot(modFit)
plot(modFit,metric="accuracy")
plot(modFit,metric="Accuracy")
modFit$Accuracy
modFit
library(caret)
library(foreach)
library(doParallel)
setwd("D:/Mes documents/Coursera/Practical Machine Learning/Project")
#setwd("C:/Documents and Settings/jean-pierre.sylvan/Mes documents/Practical_ML/Project")
pml_training=read.csv(file="pml-training.csv",header=T,sep=,)
pml_training=pml_training[,-1]
pml_testing=read.csv(file="pml-testing.csv",header=T,sep=,)
pml_testing=pml_testing[,-1]
library(caret)
library(foreach)
library(doParallel)
```
# Getting the data and partitioning
setwd("D:/Mes documents/Coursera/Practical Machine Learning/Project")
#setwd("C:/Documents and Settings/jean-pierre.sylvan/Mes documents/Practical_ML/Project")
pml_training=read.csv(file="pml-training.csv",header=T,sep=,)
pml_training=pml_training[,-1]
pml_testing=read.csv(file="pml-testing.csv",header=T,sep=,)
pml_testing=pml_testing[,-1]
Type=character(dim(plm_training)[2])
for (i in 1:length(Type)) {
Type[i] = class(plm_training[,i])
}
Num = (Type == "numeric")|(Type == "integer")
num_NA=vector(mode="numeric",length=dim(plm_training)[2])
for (i in 1:length(num_NA)) {
num_NA[i] = mean(is.na(plm_training[,i]))
}
plm_training2 = pml_training[,Num & (num_NA<0.9)]
pca
pca=preProcess(x=pml_training2,method="pca",thresh=0.9)
pml_training2 = pml_training[,Num & (num_NA<0.9)]
pca=preProcess(x=pml_training2,method="pca",thresh=0.9)
modFit
