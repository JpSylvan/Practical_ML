plot(f,0, 3)
plot(f(3,2,y),0,3)
plot(1:10, 1:10, type = "l", ylim = c(0, 10))
plot(1:10, 1:10, type = "l", ylim = c(0, 10));
plot(sin, -pi, 2*pi)
plot(1:10, 1:10, type = "l", ylim = c(0, 10));
points(c(8, 8, 9, 9), c(1, 2, 1, 2), pch = 1:4)
pari1 <- function (c1,x,y) {
return((c1-1)*x-y)
}
pari1(2,0,5)
pari2 <- function(c2,x,y) {
return((c2-1)*y-x)
}
pari <- function(c1,c2,x,y) {
return((c1-2)*x+(c2-2)*y)
}
pari1(c1=3,x=10,y)
plot(sin, -pi, 2*pi)
plot(pari1,1,2)
plot(pari1(c1=3,x=15),1,2)
plot(pari1(c1=3,x=15,y=0:100),1,2)
plot(pari1(c1=3,x=15,y=0:100))
plot(pari1(c1=3,x=15,y=seq(0,100,0.1))
)
plot(pari1(c1=3,x=15,y=seq(0,100,0.1)))
plot(pari1(c1=3,x=15,y=seq(0,10,0.1)))
plot(pari2(c2=5,x=15,y=seq(0,10,0.1)))
plot(pari(c1=5,c2=3.5,x=10,y=0:100))
lines(pari1(c1=5,x=10,y=0:100))
lines(pari2(c2=3.5,x=10,y=0:100))
plot(pari(c1=5,c2=3.5,x=10,y=0:100),ylim=c(0,100))
lines(pari1(c1=5,x=10,y=0:100))
lines(pari2(c2=3.5,x=10,y=0:100))
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
plot(cars)
text(cars[c(23,49),1],cars[c(23,49),2)]+4,c(23,49))
text(cars[c(23,49),1],cars[c(23,49),2]+4,c(23,49))
text(cars[c(25,49),1],cars[c(23,49),2]+4,c(23,49))
head(cars)
cars
help(head)
l=lm(dist~speed,data=cars)
abline(l)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data(AlzheimerDisease)
adData=data.frame(predictors)
predictors
class(predictors)
head(predictors)
titles(predictors)
title(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
SuperPlasticizer
mixtures$SuperPlasticizer
training
head(training)
training$Superplasticizer
hist(training$Superplasticizer)
log(0)
log(exp(1))
ln_plast=log(training$Superplasticizer)
hist(ln_plast)
ln_plast=log(training$Superplasticizer+1)
hist(ln_plast)
library(ggplot2)
qplot(training$CompressiveStrength)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength,data=training,colour=)
qplot(CompressiveStrength,data=training,colour=all)
qplot(CompressiveStrength,data=training,colour=.)
head(training)
qplot(CompressiveStrength,colour=Age,data=training)
inTrain
head(inTrain)
qplot(CompressiveStrength,colour=Age,data=mixtures)
head(mixtures)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
data=data.frame(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6,training$IL_6_Receptor,training$IL_7,training$IL_8)
data
head(data)
help(preProcess)
pca=preProcess(data,method="pca")
pca
pca=preProcess(data,method="pca",pcaComp=5)
pca
summary(pca)
pca$sdev
sdev(pca)
pca$rotation
summary(pca)
pca$std
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
pca2=prcomp(data=data)
pca2=prcomp(data)
summary(pca2)
data=data.frame(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6,training$IL_6_Receptor,training$IL_7,training$IL_8)
pca2=prcomp(data)
summary(pca2)
pca=preProcess(data,method="pca")
pca
summary(pca)
pca$std
sum(pca$std)
sort(pca$std)
help(sort)
sort(pca$std,decreasing=TRUE)
var_exp=sort(pca$std,decreasing=TRUE)/(sum(pca$std)
)
car_exp
var_exp
sum(var_exp[1:5])
sum(var_exp[1:6])
sum(var_exp[1:7])
sum(var_exp[1:8])
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
data=data.frame(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6,training$IL_6_Receptor,training$IL_7,training$IL_8)
data=data.frame(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6,training$IL_6_Receptor,training$IL_7,training$IL_8,training$diagnosis)
help(caret$predict)
help(predict)
help(caret.predict)
help(caret)
modelFit=train(data$diagnosis~.,method="glm",data=data)
modelFit=train(diagnosis~.,method="glm",data=data)
head(data)
dim(data)
length(data$diagnosis)
length(data$training.diagnosis)
modelFit=train(training.diagnosis~.,method="glm",data=data)
modelFit=train(data$training.diagnosis~.,method="glm",data=data)
install.packages('e1071', dependencies=TRUE)
modelFit=train(data$training.diagnosis~.,method="glm",data=data)
modelFit
modelFit
summary(modelFit)
confusionMatrix(testing$diagnosis,predict(modelFit))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
size(adDate)
dim(adData)
dim(adData$diagnosis)
dim(adData[:,1])
dim(adData[,1])
dim(adData)
type(adData)
class(adData)
adData[1,1]
adData[1,:]
adData[1,]
adData[1,1]
adData[1,22]
adData[1,2]
name(adData)
names(adData)
adData$diagnosis
length(adData$diagnosis)
dim(adData$diagnosis)
dim(training)
dim(testing)
help(createDataPartition)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=T)
training = adData[trainIndex,]
testing = adData[-trainIndex,]dim(training)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=F)
training = adData[trainIndex,]
testing = adData[-trainIndex,]dim(training)
trainIndex = createDataPartition(diagnosis, p = 0.50, list=F)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
qplot(CompressiveStrength,data=training)
dim(training)
training$CompressiveStrength)
training$CompressiveStrength
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength,data=training)
library(ggplot)
library(ggplot2)
qplot(CompressiveStrength,data=training)
help(gplot)
help(qplot)
a=[1 2]
a=[1;2]
a=c(1,2)
a
type(a)
class(a)
is.integer(a)
is.numeric(a)
is.matrix(a)
is.vector(a)
b=1
is.vector(b)
plot(training$CompressiveStrength)
plot(CompressiveStrength,data=training)
a=factor(1,2)
a
class(a)
class(training$FlyAsh)
help(cut2)
library(Hmisc)
install.package("Hmisc")
install.packages("Hmisc")
library(Hmisc)
help(cut2)
hist(training$FlyAsh)
test=cut2(training$FlyAsh,g=2)
size(test)
dim(test)
test
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,col=test)
dim(training)
class(training)
dim(training,2)
dim(training)[2]
help(source)
print(2)
for i in 1:dim(training)[2] {
print(class(training[,i]))
}
for (i in 1:dim(training)[2]) {
print(class(training[,i]))
}
training
training[,2]
class(training[,2])
vector()
class(2)
class(2.)
class(int(2)
)
class(as.integer(2))
class(integer(2))
class('2')
class(factor=(2))
factor(2)
class(factor(2))
2L
class(2L)
attributes(2)
a=2
attributes(a)
attributes(training)
nams(trainnig)
names(trainin)
names(training)
class(TRUE)
class(1)
class(logical(1))
logical(1)
logical(0)
logical(2)
as.logical(2)
as.logical(0)
class(1+1i)
m=matrix(1:10)
m
class(m)
attributes(m)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
source(ex3.r)
getwd()
source(ex3.r,local="D:Mes Documents/Coursera/Practical Machine Learning")
source(ex3.r,local="D:Mes Documents/Coursera/Practical Machine Learning/")
hist(training$SuperPlasticizer)
class(training$SuperPlasticizer)
dim(training)
names(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer)
)
sum(training$Superplasticizer<0)
sum(training$Superplasticizer=0)
sum(training$Superplasticizer==0)
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
names(traiing)
names(training)
dim(training) #131 colonnes
names(training) #12 variables qui comment par IL
X = training[,58:69]
pca=preProcess(X,method="pca")
pca
summary(pca)
print(pca)
pca=preProcess(X,method="pca",thresh=0.85)
print(pca)
pca=preProcess(X,method="pca",thresh=0.9)
summary(pca)
print(pca)
dim(training) #131 colonnes
names(training) #12 variables qui comment par IL
X = data.frame(training[,58:69],training$diagnosis)
names(X)
X = data.frame(training[,58:69],diagnosis=training$diagnosis)
names(X)
train(diagnosis~.,data=X,method="glm")
modelFit=train(diagnosis~.,data=X,method="glm")
predict(modelFit,newdata=test)
predict(modelFit,newdata=testing)
testing$diagnosis
predict(modelFit,newdata=testing)==testing$diagnosis
mean(predict(modelFit,newdata=testing)==testing$diagnosis)
preProc=preProcess(X,method="pca",thresh=80)
preProc=preProcess(X[,-1],method="pca",thresh=80)
a=matrix(1:4,nrow=2)
a
a[,1]
a[,-1]
names(X)
tail(X)
preProc=preProcess(X[,-13],method="pca",thresh=80)
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testing))
preProc
class(preProc)
dim(preProc)
print(preProc)
summary(preProc)
predict(preProc,training$diagnosis)
predict(preProc,X[,-13])
trainPC = predict(preProc,X[,-13])
modelFit = train(diagnosis~.,data=trainPC,method="glm")
modelFit = train(X$diagnosis~.,data=trainPC,method="glm")
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testing))
dim(testing)
testPC=predict(PreProc,newdata=testing[,58:69])
testPC=predict(preProc,newdata=testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,newdata=testPC))
help(createDataPartition)
dim(segmentationOriginal)
dim(SegmentationOriginal)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
dim(SegmentationOriginal)
dim(segmentationOriginal)
names(segmentationOriginal)
inTrain = createDataPartition(y=segmentationOriginal$Case,p=0.5,list=F)
training = segmentationOriginal[inTrain,]
testing = segmentationOriginal[-inTrain,]
set.seed(125)
dim(training)
modFit = train(Case,data=training,method="rpart")
names(training)
names(training)=="Case"
which(names(training)=="Case")
which(names(training)=="CART")
which(names(training)=="Cart")
training$Case[1:10]
training$Case
training = segmentationOriginal[Case=='Train',]
training = segmentationOriginal[segmentationOriginal$Case=='Train',]
testing = segmentationOriginal[segmentationOriginal$Case=='Test',]
set.seed(125)
names(training)
which(training=="PS")
a
which(a==2)
training(2728)
training[2728]
a[2]
class(training)
attributes(training)
training$Cell[1:10]
names(training)
training$Case[1:5]
training$Class[1:5]
modFit = train(Class~.,data=training,method="rpart")
modFit
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
help(fancyRpartPlot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(caret)
library(doMC)
registerDoMC(cores=4)
install.packages("doMC")
library(caret)
library(doMC)
install.packages("doMC")
updateR()
library(installR)
library(installr)
updateR()
install.packages(foreach)
install.packages("foreach")
install.packages("foreach")
library(doMC)
library(foreach)
help(foreach)
getDoParWorkers()
registerDoSEQ()
registerDoMC(cores = 4)
setwd("D:/Mes documents/Coursera/Practical Machine Learning/Project")
#setwd("C:/Documents and Settings/jean-pierre.sylvan/Mes documents/Practical_ML/Project")
pml_training=read.csv(file="pml-training.csv",header=T,sep=,)
pml_training=pml_training[,-1]
pml_testing=read.csv(file="pml-testing.csv",header=T,sep=,)
pml_testing=pml_testing[,-1]
#We keep only the feature which are not factors, anyway the factor feature are all empty
#And only the features where mean(is.na)<90%
num_NA=vector(mode="numeric",length=dim(pml_training)[2])
for (i in 1:length(num_NA)) {
num_NA[i] = mean(is.na(pml_training[,i]))
}
Type=character(dim(pml_training)[2])
for (i in 1:length(Type)) {
Type[i] = class(pml_training[,i])
}
Num = (Type == "numeric")|(Type == "integer")
table = pml_training[,Num & (num_NA<0.9)]
pca=preProcess(x=table,method="pca",thresh=0.9)
trainPC = predict(pca,table)
library(caret)
table = pml_training[,Num & (num_NA<0.9)]
pca=preProcess(x=table,method="pca",thresh=0.9)
trainPC = predict(pca,table)
library(doParallel)
install.packages("doParallel")
library(doParallel)
cl<-makeCluster(detectCores())
c1
registerDoParallel(4)
dim(trainPC)
modFit = train(pml_training$classe~.,data=trainPC,method="rf")
pml_testing2=pml_testing[,(num_NA<0.9)&Num]
pml_testing2PC=predict(pca,newdata=pml_testing2)
predict(modFit,newdata=pml_testing2PC)
plor(predict(modFit,newdata=pml_testing2PC))
plot(predict(modFit,newdata=pml_testing2PC))
plot(pml_training$classe)
